package cartirerepairingservice;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import com.mycompany.cartirerepairingservice.Cartirerepairingservice;

public class ServiceAppointmentMgmt extends JFrame {
    // Class variables (components)
    private JButton addButton, editButton, deleteButton;
    private JTextField customerIdField, serviceDateField, issuesReportedField;
    private JCheckBox isCompletedCheckBox;
    private JTable appointmentsTable;
    private DefaultTableModel model;

    public ServiceAppointmentMgmt() {
    initUIComponents(); 
    setTitle("Service Appointment Management");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack(); 
    setLocationRelativeTo(null);
    setVisible(true); 
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    refreshTable();
    }


    private void initUIComponents() {
        // Set Layout
        setLayout(new BorderLayout());

   
        addButton = new JButton("Add");
        editButton = new JButton("Edit");
        deleteButton = new JButton("Delete");

        customerIdField = new JTextField(10);
        serviceDateField = new JTextField(10);
        issuesReportedField = new JTextField(10);
        isCompletedCheckBox = new JCheckBox("Completed");

  
        model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"Appointment ID", "Customer ID", "Service Date", "Issues Reported", "Completed"});
        appointmentsTable = new JTable(model);

        // Add selection model listener
        appointmentsTable.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = appointmentsTable.getSelectedRow();
            if (selectedRow >= 0) {
                customerIdField.setText(model.getValueAt(selectedRow, 1).toString());
                serviceDateField.setText((String) model.getValueAt(selectedRow, 2));
                issuesReportedField.setText((String) model.getValueAt(selectedRow, 3));
                isCompletedCheckBox.setSelected((Boolean) model.getValueAt(selectedRow, 4));
            }
        });

        // Buttons Panel
        JPanel buttonsPanel = new JPanel();
        buttonsPanel.add(addButton);
        buttonsPanel.add(editButton);
        buttonsPanel.add(deleteButton);

        // Form Panel
        JPanel formPanel = new JPanel(new GridLayout(0, 2, 5, 5)); 
        formPanel.add(new JLabel("Customer ID:"));
        formPanel.add(customerIdField);
        formPanel.add(new JLabel("Service Date:"));
        formPanel.add(serviceDateField);
        formPanel.add(new JLabel("Issues Reported:"));
        formPanel.add(issuesReportedField);
        formPanel.add(new JLabel("Completed:"));
        formPanel.add(isCompletedCheckBox);

        // Add components to JFrame
        add(formPanel, BorderLayout.NORTH);
        add(new JScrollPane(appointmentsTable), BorderLayout.CENTER);
        add(buttonsPanel, BorderLayout.SOUTH);

        // Add action listeners for buttons
        addButton.addActionListener(e -> addAppointment());
        editButton.addActionListener(e -> editAppointment());
        deleteButton.addActionListener(e -> deleteAppointment());
    }

private void addAppointment() {
    try {
        // Assuming IDs are auto-generated by the database, so no need for appointmentId here
        int customerId = Integer.parseInt(customerIdField.getText());
        String serviceDate = serviceDateField.getText();
        String issuesReported = issuesReportedField.getText();
        boolean isCompleted = isCompletedCheckBox.isSelected();

        // Create a new ServiceAppointment object
        ServiceAppointment newAppointment = new ServiceAppointment(0, customerId, serviceDate, issuesReported, isCompleted); 

        // Call the addServiceAppointment method from Cartirerepairingservice
        Cartirerepairingservice.addServiceAppointment(newAppointment);

        // Refresh the table to show the new appointment
        refreshTable();
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Please enter valid numbers for Customer ID.");
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error adding appointment: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void editAppointment() {
    int selectedRow = appointmentsTable.getSelectedRow();
    if (selectedRow >= 0) {
        try {
            int appointmentId = (int) model.getValueAt(selectedRow, 0); // Adjust column index if needed
            int customerId = Integer.parseInt(customerIdField.getText());
            String serviceDate = serviceDateField.getText();
            String issuesReported = issuesReportedField.getText();
            boolean isCompleted = isCompletedCheckBox.isSelected();

            Cartirerepairingservice.editServiceAppointment(appointmentId, customerId, serviceDate, issuesReported, isCompleted);
            refreshTable();
            JOptionPane.showMessageDialog(this, "Appointment updated successfully!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error updating appointment: " + ex.getMessage(), "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select an appointment to edit.");
    }
}


private void deleteAppointment() {
    int selectedRow = appointmentsTable.getSelectedRow();
    if (selectedRow >= 0) {
        int appointmentId = (int) model.getValueAt(selectedRow, 0); // Adjust column index if needed
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this appointment?", "Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Cartirerepairingservice.deleteServiceAppointment(appointmentId);
                refreshTable();
                JOptionPane.showMessageDialog(this, "Appointment deleted successfully!");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error deleting appointment: " + ex.getMessage(), "Delete Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
    }
}


    // Refresh the JTable with updated appointment list
private void refreshTable() {
    List<ServiceAppointment> allAppointments = Cartirerepairingservice.listAllServiceAppointments();
    model.setRowCount(0); // Clear the table first

    for (ServiceAppointment appointment : allAppointments) {
        model.addRow(new Object[]{
                appointment.getAppointmentId(),
                appointment.getCustomerId(),
                appointment.getServiceDate(),
                appointment.getIssuesReported(),
                appointment.isCompleted()
        });
    }
}


    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            new ServiceAppointmentMgmt().setVisible(true);
        });
    }
}

